@startuml Lavka Recommender System Architecture

' Define the styles and colors
skinparam class {
    BackgroundColor #FEFEFE
    ArrowColor #333333
    BorderColor #666666
}

skinparam package {
    BackgroundColor #F8F8F8
    BorderColor #999999
}

skinparam note {
    BackgroundColor #FFFFCC
    BorderColor #999999
}

' Define the main classes
package "Core Components" {
    class Experiment {
        - name: str
        - config: Config
        - data_loader: DataLoader
        - feature_factory: CachedFeatureFactory
        - model_factory: ModelFactory
        - trainer: Trainer
        - tuner: HyperparameterTuner
        + setup()
        + run()
        + evaluate()
        + create_kaggle_submission()
        - _run_single_run()
        - _run_tuning()
    }

    class Trainer {
        - config: Config
        - data_loader: DataLoader
        - feature_factory: FeatureFactory
        - model_factory: ModelFactory
        - time_splitter: TimeSplitter
        + train(split_type)
        + evaluate_model(model)
        - _train_with_single_split()
        - _train_with_multiple_splits()
    }

    class Config {
        - _config: dict
        + load(path)
        + get(path)
        + set(path, value)
        + to_dict()
    }

    class DataLoader {
        - config: Config
        - train_df: DataFrame
        - test_df: DataFrame
        + load_data()
        + load_test_data()
        + clean_history()
    }

    class TimeSplitter {
        - config: Config
        + create_splits(df, split_type)
        - _create_standard_split()
        - _create_fixed_window_splits()
        - _create_expanding_window_splits()
    }

    enum SplitType {
        STANDARD
        FIXED_WINDOW
        EXPANDING_WINDOW
    }

    class HyperparameterTuner {
        - config: Config
        - data_loader: DataLoader
        - feature_factory: FeatureFactory
        - model_factory: ModelFactory
        - trainer: Trainer
        + tune()
        - _objective()
        - _train_and_evaluate()
    }
}

package "Feature Generation" {
    class FeatureFactory {
        - config: Config
        + generate_batch(history_df, target_df)
        + register(feature_name)
        - _generate_feature(feature_name)
    }

    class CachedFeatureFactory {
        - feature_factory: FeatureFactory
        - config: Config
        - cache_path: str
        + generate_batch(history_df, target_df)
        - _generate_cache_key()
        - _load_from_cache()
        - _save_to_cache()
    }

    class FeatureSelector {
        - config: Config
        + select_features(features, target)
        - _select_by_importance()
        - _select_by_correlation()
    }
}

package "Model Components" {
    class ModelFactory {
        - config: Config
        - models: dict
        + create_model(override_params)
    }

    abstract class Model {
        # name: str
        # params: dict
        # model: object
        # logger: Logger
        + train(train_features, train_labels)
        + predict(features)
        + get_feature_importance()
        + save(filename)
        + {static} load(filename)
    }

    class CatBoostModel {
        + train(train_features, train_labels)
        + predict(features)
        + get_feature_importance()
    }

    class LightGBMModel {
        + train(train_features, train_labels)
        + predict(features)
        + get_feature_importance()
    }

    class CatBoostRankerModel {
        + train(train_features, train_labels)
        + predict(features)
        + get_feature_importance()
    }
}

package "Utilities" {
    class RankingMetrics {
        + {static} ndcg_at_k()
        + {static} precision_at_k()
        + {static} recall_at_k()
    }

    class Visualizer {
        + plot_feature_importance()
        + plot_metrics_history()
        + plot_predicted_vs_actual()
    }
}

' Define relationships
Experiment o-- Config
Experiment o-- DataLoader
Experiment o-- CachedFeatureFactory
Experiment o-- ModelFactory
Experiment o-- Trainer
Experiment o-- HyperparameterTuner

Trainer o-- Config
Trainer o-- DataLoader
Trainer o-- FeatureFactory
Trainer o-- ModelFactory
Trainer o-- TimeSplitter

TimeSplitter o-- Config
TimeSplitter -- SplitType : uses >

HyperparameterTuner o-- Config
HyperparameterTuner o-- DataLoader
HyperparameterTuner o-- FeatureFactory
HyperparameterTuner o-- ModelFactory
HyperparameterTuner o-- Trainer

CachedFeatureFactory o-- FeatureFactory
CachedFeatureFactory o-- Config

FeatureFactory o-- Config

DataLoader o-- Config

ModelFactory o-- Config
ModelFactory -- Model : creates >

Model <|-- CatBoostModel
Model <|-- LightGBMModel
Model <|-- CatBoostRankerModel

FeatureSelector o-- Config

' Add notes for clarity
note right of Experiment
  Coordinates the overall experiment workflow.
  Delegates to Trainer or HyperparameterTuner
  based on experiment type.
end note

note right of CachedFeatureFactory
  Wraps FeatureFactory to provide transparent
  caching of generated features.
  Uses composition pattern.
end note

note bottom of TimeSplitter
  Provides three strategies for time-based
  data splitting:
  - standard: single train/validation split
  - fixed_window: constant history size
  - expanding_window: growing history window
end note

note bottom of CatBoostRankerModel
  Specialized model for learning-to-rank tasks.
  Uses request_id/group_id for grouping examples.
  Optimizes ranking metrics like NDCG.
end note

note top of Trainer
  Central component for model training.
  Handles single and multiple split strategies.
  Manages feature generation and model training.
end note

@enduml